---
# file: roles/docker-mantisbt/tasks/main.yaml

- name: Check preconditions
  assert:
    that:
    - mantisbt_db_root_password is defined
    - mantisbt_db_password is defined

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ docker_restore_config_base_dir }}/{{ mantisbt_dv_name }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

# *****************************************************************************
# backup script part

- name: Assemble dir for backup scripts
  file:
    path: /usr/libexec/bacula/backup-scripts
    state: directory

- name: before_backup script part
  template:
    src: before_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.before_backup.mantisbt

- name: after_backup script part
  template:
    src: after_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.after_backup.mantisbt

# *****************************************************************************
# update the Docker restore config

- name: make config.sh
  template:
    src: config.sh.j2
    dest: '{{ docker_restore_config_base_dir }}/{{ mantisbt_dv_name }}/config.sh'
    backup: yes
    owner: root
    group: tape
    mode: 'u=rw,g=r,o='

- name: exists - state file
  stat:
    path: '{{ docker_restore_config_base_dir }}/{{ mantisbt_dv_name }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_mantisbt_restore

# *****************************************************************************
# Update or make the image.
- name: Checkout image repo
  git:
    repo: '{{ mantisbt_image_repo }}'
    version: master
    dest: '{{ docker_projects_dir }}/docker-mantisbt'

- name: copy script
  copy:
    remote_src: true
    src: '{{ docker_projects_dir }}/docker-mantisbt/mantisbt.sh'
    dest: '{{ docker_restore_config_base_dir }}/{{ mantisbt_dv_name }}/'
    mode: 'u=rwx,g=rx,o=rx'

- name: build image
  docker_build:
    image_name: '{{ mantisbt_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    dockerfile_dir: '{{ docker_projects_dir }}/docker-mantisbt'

- name: Checkout db repo
  git:
    repo: '{{ mantisbt_db_image_repo }}'
    version: master
    dest: '{{ docker_projects_dir }}/docker-mysql-data'
    key_file: '/home/ansibleremote/.ssh/id_rsa'

- name: build data-container image
  docker_build:
    image_name: '{{ mantisbt_db_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    dockerfile_dir: '{{ docker_projects_dir }}/docker-mysql-data'

# *****************************************************************************
# copy the MySQL config to the restore directory

- name: copy mysql config
  copy:
    src: '{{ item }}'
    dest: '{{ host_mantisbt_docker_restore_dir }}/{{ item }}'
    setype: svirt_sandbox_file_t
  with_items:
  - largefile.cnf
  - character-set.cnf

# *****************************************************************************
# Create the data volumes

- name: data-volume container (mantisbt)
  docker_datavolume:
    image_name: '{{ mantisbt_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    data_volume_container_name: '{{ mantisbt_dv_name }}'

- name: data-volume container (mysql)
  docker_datavolume:
    image_name: '{{ mantisbt_db_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    data_volume_container_name: '{{ mantisbt_db_dv_name }}'

- name: stop prev container (mysql)
  docker_container:
    image: '{{ mantisbt_db_image_name }}:{{ docker_image_tag }}'
    name: '{{ mantisbt_db_container_name }}'
    state: stopped

- name: initial populate (mysql - import config)
  command: 'docker run --rm --volumes-from {{ mantisbt_db_dv_name }} -v {{ host_mantisbt_docker_restore_dir }}:/tmp/conf.d {{ mantisbt_db_image_name }}:{{ docker_image_tag }}'

- name: initial populate (mysql - database)
  docker_db_init:
    image_name: '{{ mantisbt_db_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    container_name: '{{ mantisbt_db_dv_name }}_init_db'
    data_volume_container_name: '{{ mantisbt_db_dv_name }}'
    database_name: bugtracker
    database_user: '{{ mantisbt_db_user }}'
    database_password: '{{ mantisbt_db_password | quote }}'
    database_root_password: '{{ mantisbt_db_root_password | quote }}'

# *****************************************************************************
# Start the data container running

- name: start container (mysql)
  docker_container:
    detach: true
    image: '{{ mantisbt_db_image_name }}:{{ docker_image_tag }}'
    name: '{{ mantisbt_db_container_name }}'
    restart_policy: '{{ docker_restart_policy }}'
    volumes_from:
      - '{{ mantisbt_db_dv_name }}'

- name: start container (mantisbt)
  docker_container:
    detach: true
    env:
      MANTISBT_HOSTNAME: '{{ container_addr_map.mantisbt.hostname }}'
      MANTISBT_MAIL_USER: 'mantis'
      MANTISBT_MAIL_PASSWORD: '{{ mantisbt_email_password | quote }}'
      MANTISBT_LDAP_PASSWORD: '{{ openldap_proxyagent_password | quote }}'
    hostname: '{{ container_addr_map.mantisbt.hostname }}'
    image: '{{ mantisbt_image_name }}:{{ docker_image_tag }}'
    link:
      - '{{ openldap_container_name }}:mantisbt_ldap'
      - '{{ mantisbt_db_container_name }}:mantisbt_db'
      - '{{ exim4_container_name }}:{{ container_addr_map.exim4.hostname }}'
    name: '{{ mantisbt_container_name }}'
    ports: '{{ container_port_map.mantisbt.port_args }}'
    restart_policy: '{{ docker_restart_policy }}'
    volumes_from:
      - '{{ openssl_dv_name }}'
      - '{{ mantisbt_dv_name }}'

# *****************************************************************************
# remove the MySQL config in the restore directory

- name: cleanup - import mysql config
  file:
    path: '{{ mantisbt_docker_restore_dir }}/{{ item }}'
    state: absent
  with_items:
  - largefile.cnf
  - character-set.cnf

# *****************************************************************************
# restore?

- include_tasks: restore.yml
  when: st_mantisbt_restore.stat.exists == False
